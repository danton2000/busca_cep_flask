# PARA A CRIAÇÃO DE PAGINAS HTML, É NECESSARIO QUE TENHAMOS UMA PASTA 
# CHAMADA DE TEMPLATES

# PARA QUE A CONSULTA DO CEP SEJA FEITA ATRAVÉS DE UMA PÁGINA WEB
# SERÁ NECESSARIO QUE INSTALEMOS O FLASK
# pip install flask
# É NECESSARIO QUE O FLASK SEJA IMPORTADO PARA DENTRO DO MODULO
# POR BOAS PRÁTICAS É UTILIZADO A IMPORTAÇÃO RELATIVA
from flask import (
    Flask,
    render_template, # FUNÇÃO PARA ASSOCIAR A PÁGINA HTML E EXECUTAR O JINJA
    request # VARIAVEL DO FLASK QUE CONTEM AS INFORMAÇÕES E CONTEUDOS DE UMA REQUISIÇÃO
)
# "" OS COMANDOS ABAIXO SÃO EXECUTADOS EM UM TERMINAL CMD ""
# PARA EXECUTAR O SERVIÇO DO FLASK É NECESSÁRIO INFORMA O MÓDULO QUE CONTEM A APLICAÇÃO
# SET FLASK_APP=busca_cep_flask
# EXECUTAR A APLICAÇÃO E COMO SUJESTÃO UTILIZAR O MODO DEBUG
# FLASK --DEBUG RUN

# É NECESSARIO QUE UMA APLICAÇÃO SEJA CRIADA
app = Flask(__name__)

# PREPARAR UMA ROTA PARA SER ACESSDA VIA NAVEGADOR WEB
# UTILIZANDO UM TEXTO PODEMOS DEFINIR A ROTA DISPONIVEL PARA A NOSSA APLICAÇÃO
# ASSOCIADO A ROTA É NECESSARIO COLOCAR UMA FUNÇÃO QUE IRÁ DEFINIR A LOGICA QUE SERÁ EXECUTADA
# PREPARAR A PAGINA PARA RECEBER REQUISIÇÕES UTILIZANDO OS MÉTODOS GET E POST
# LEMBRANDO POR PADRÃO CASO NÃO SEJA DEFINIDO NADA O MÉTODO É GET
# PARA DEFINIR OS MÉTODOS BUSCA UTILIZAR O PARAMETRO NOMINAL METHODS E COLOCAR COMO CONTEUDO UMA TUPLA
@app.route("/", methods=("GET", "POST"))
def busca_cep():
    # TESTAR SE A REQUISIÇÃO DO USUÁRIO FOI FEITA UTILIZANDO O METODO POST
    if request.method == "POST":    
        # CASO SEJA UM POST, É NECESSÁRIO QUE SEJA FEITA A CAPTURA DO FORMULÁRIO ENVIADO
        # O FORMULÁRIO ESTÁ DISPONIVEL EM UM DICIONÁRIO DENTRO DA REQUEST.FORM
        cep = request.form["cep"]

        """
            INICIO DO CÓDIGO COPIADO
        """

        # INSTALAR O MODULO REQUESTS
        # pip install requests

        # IMPORTAR O MODULO INSTALADO 'REQUESTS'
        import requests

        # VARIAVEL TEXTO QUE IRÁ ARMAZENAR O CEP PARA SER CONSULTADO
        # PROGRAMAR UMA ENTRADA DE DADOS PARA QUE O USUÁRIO POSSA INFORMAR O CEP
        # QUE SERÁ CONSULTADO
        # PARA ISSO UTILIZAREMOS O INPUT
        # cep = input("Informe o CEP para consulta: ")
        # cep = "91751000"
        print("CEP: ", cep)

        # URL DEFINIDA PELA API
        # PARA CONSULTAR O CEP É NECESSARIO INFORMAR NO FINAL DA URL
        # ENTÃO PODEMOS CONCATENAR OU INTERPOLAR PARA EXECUTAR A CONSULTA
        url = "https://cep.awesomeapi.com.br/json/" + cep

        print("URl: ", url)

        # EXECUTAR O COMANDO DE CONSULTA DE DADOS UTILIZANO O MÉTODO GET
        # RETORNO DO CONTEUDO RETORNADO PELA API SERÁ ARMAZENADO NA VARIAVEL 'RETORNO_API'
        retorno_api = requests.get(url)

        print("RETORNO API: ", retorno_api)

        # PEGAR O RESULTADO GERADO DENTRO DO "ARQUIVO" JSON E ARMAZENAR
        # EM UMA VARAIVEL DO PYTHON, PARA ISSO É NECESSARIO TRANSFORMAR EM UMA ESTRUTURA DE COLEÇÃO
        retorno_dados = retorno_api.json()

        print("RETORNO DADOS: ", retorno_dados)

        # ANALIZANDO OS DADOS QUE FORAM RETORNADOS, FOI ENTENDIDO QUE A CHAVE "ADDRESS" POSSUI O RESULTADO ESPERADO
        endereco = retorno_dados["address"]

        print("ENDEREÇO: ", endereco)

        """
            FIM DO CÓDIGO COPIADO
        """

        # FOI CRIADO UM RETORNO DENTRO DO BLOCO PARA ENVIAR UMA VARIAVEL PARA O JINJA
        # ESTA VARIAVEL SE CHAMA ENDERECO, QUE VAI CONTER O ENDEREÇO VINDO DA API(BUSCA_CEP)
        # LEMBRANDO AS VARIAVEIS ENVIADAS PARA O JINJA É UM TIPO DE DICIONÁRIO
        # SENDO ASSIM O NOME DA VARIAVEL É A CHAVE DO DICIONÁRIO QUE FICA A ESQUERDA E O SEU
        # CONTEUDO FICA A DIREITA
        return render_template("busca_cep.html", endereco = endereco)

    # O RETORNO DA FUNÇÃO SERÁ APRESENTADO NO NAVEGADOR
    # UTILIZAR O RENDER_TEMPLATE PARA QUE A ASSOCIAÇÃO SEJA EXECUTADA
    # PARA ESTE CASO ESPECIFICO EXISTE O ARQUIVO BUSCA_CEP.HTML DISPONIVEL NA PASTA TEMPLATES
    # LEMBRANDO O NOME DO ARQUIVO HTML DEVE SER UM TEXTO
    return render_template("busca_cep.html")


